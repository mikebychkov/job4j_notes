1. Что такое генерики?

Классы, интерфейсы, методы которые поддерживают параметризацию типами


2. Типы генериков?

Классы, интерфейсы, методы, конструкторы


3. Где хранится информация про Generics?

(1) В угловых скобках после имени класса, метода
(2) Только в исходном коде


4. Как можно получить тип Generics?

Никак, во время выполнения информации о генериках отсутсвует, в результате работы механизмов стирания.


5. Что такое итератор?

Интерфейс в котором определены методы hasNext() и next()


6. Что такое коллекции?

Классы которые поддерживают интерфес Collection


7. Назовите базовые интерфейсы коллекций?

Collection
List
Set


8. Расскажите реализации интерфейса List?

ArrayList
LinkedList


9. Расскажите реализации интерфейса Set?

HashSet
TreeSet


10. Расскажите реализации интерфейса Map?

HashMap
TreeMap


11. Отличие ArrayList от LinkedList?

(1) базируется на массиве, поддерживает интерфейс List
(2) базируется на связанном списке, поддерживает интерфейс Dequeue и List


12. Отличие Set от List?

(1) коллекция уникальных значений
(2) коллекция значений


13. Расскажите про методы Object hashCode и equals?

Методы переопределение которых необходимо для идентификации уникальности объекта такими коллекциями как HashMap и HashSet


14. Расскажите про реализации Map?

HashMap
TreeMap


15. Расскажите, что такое коллизии в Map? Как с ними бороться?

Когда в одну ячейку карты определяется более одного значения.


16. Расскажите, что такое анализ алгоритма?

Соотношение количества необходимых действий для получения результата и количества данных


17. Какая временная сложность алгоритмов(O-нотация) добавления, замены и удаления в каждой из коллекций? . С чем связаны отличия?

				Добавление	Замена	Удаление
ArrayList		O(1)		O(1)	O(n)
LinkedList		O(1)		O(1)	O(1)
Set				O(ln)		O(ln)	O(ln)
Map				O(ln)		O(ln)	O(ln)
Tree			O(ln)		O(ln)	O(ln)	


18. Расскажите реализации данных очередей и стеков.

PriorityQueue
ArrayDeque
LinkedList
Stack


19. Расскажите про реализации деревьев.

TreeSet
TreeMap


20. Что такое loadFactor?

Коэффициент загрузки в Hashtable и Hashmap, по умолчанию равен 0.75



https://habr.com/ru/post/162017/

===================================================================================================

1. Общее про коллекции и не только:

	а) Java 8, Полное руководство - Герберт Шилдт. Глава 18 (стр. 563)
	б) Библиотека профессионала. Java. Том 1. Основы - Кей Хостманн, Гари Корнелл. Глава 13 (стр. 683)
	в) Head First Java - Кэти Сьерра и Берт Бейтс. Глава 16 (стр. 559)
	г) Философия Java - Брюс Эккель. Глава 11 (стр. 323)
	д) Effective Java - Joshua Bloch.
	е) Грокаем Алгоритмы - Адитья Бхаргава.
	ж) Алгоритмы и структуры данных - Николаус Вирт 
	з) Структуры данных и алгоритмы Java. Роберт Лафоре
 
2. Обобщения:

	а) Java 8, Полное руководство - Герберт Шилдт. Глава 14 (стр. 395)
	б) Библиотека профессионала. Java. Том 1. Основы - Кей Хостманн, Гари Корнелл. Глава 12. (стр. 645)
	в) Head First Java - Кэти Сьерра и Берт Бейтс. Глава 16 (стр. 570)
	г) Философия Java - Брюс Эккель. Глава 15 (стр. 501)

3. Сортировка:

	а) Java 8, Полное руководство - Герберт Шилдт. Глава 18 (стр. 614 - 622)
	б) Библиотека профессионала. Java. Том 1. Основы - Кей Хостманн, Гари Корнелл. Глава 13 (стр. 739)
	в) Head First Java - Кэти Сьерра и Берт Бейтс. Глава 16 (стр. 564)

4. Создание собственных коллекций:
 
	а) Структуры данных и алгоритмы Java. Роберт Лафоре;

		- Глава 4. Стеки и Очереди (стр. 121)
		- Глава 5. Связанные списки (стр. 180)
		- Глава 8 (стр. 346), 9 (стр. 403), 10 (стр. 436). Деревья
		- Глава 11. Хеш-таблицы (стр. 487) 

5. equals, hashCode, toString:

	а) Effective Java - Joshua Bloch. Глава 3 (стр. 46) 
	
===================================================================================================
