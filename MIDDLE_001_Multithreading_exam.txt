1. Чем отличается процесс от потока?

	Процессы могут содержать внутри себя потоки, потоки могут общаьться между собой, а процессы нет


2. Каким образом можно создать поток?

	Класс Thread
	Классы реализуещие интерфейс ExecutorService: ThreadPoolExecutor, ScheduledThreadPoolExecutor, ForkJoinPool

	И передавать им классы реализующие интерфейс Runnable


3. Как работают методы sleep, yield, wait, notify и notifyAll?

	sleep - приостанавливает выполнение потока на указанное время 
	yield - уступает в планировщике выполнение другим потокам 
	wait - переводит поток в состояние ожидания
	notify - оповещает ожидающий поток о возможности продолжить выполнение
	notifyAll - оповещает все ожидающие потоки о возможности продолжить выполнение


4. Объясните следующие термины: монитор, мьютекс, критическая секция.

	монитор - это объект выполняющий роль объекта контролирующего процесс синхронизации в многопоточном выполнении
	мьютекс - специальный объект-одноместный семафор, который использует монитор для выдачи разрешения
	критическая секция - секция в которой происходит синхронизация в многопоточном выполнении


5. Как работает join()?

	метод позволяет потоку запустивщему другой поток ожидать завершения выполнения созданного потока


6. Что такое DeadLock? Приведите примеры.

	Ситуация когда поток ждет возможности заблокировать ресурсы которые в данный момент заблокированы потоком, который в свою очередь ожидает 
	возможности заблокировать ресурсы заблокированные первым потоком.


7. Назовите различия между Collections.synchronizedMap(new HashMap()) и ConcurrentHashMap.

	synchronizedMap - для операций чтения/записи блокирует всю коллекцию
	ConcurrentHashMap - блокирует только записываемыый объект
	

8. Различия в интерфейсах Runnable и Callable.

	Runnable - используется во всех реализациях потоковых средств. не возвращает значение.
	Callable - используется в пуле потоков ExecutorService. возвращает значение.


9. Различя между isInterrupted(), interrupted().

	isInterrupted() - нестатический метод который проверяет прерванность у вызываемого потока
	interrupted() - статический метод который проверяет и снимает флаг у потока в котором вызван


10. Что происходит при вызове Thread.interrupt()?

	Поток помечается как прерванный и если есть вызовы методов чувствительых к прерыванию, вызывается исключение InterruptedException


11. Перечислите ВСЕ причины по которым может выскочить InterruptedException.

	Вызов метода Thread.interrupt()
	Непредвиденное завершение/прекращение работы потока


12. Назовите отличия synchronize{} и ReentrantLock.

	ReentrantLock работает также как и synchronize, но имеет ряд расширений, проверку занятости критической секции (кс), доступ к потоку блокируещему кс и многое другое:
		protected Thread 				getOwner()									Returns the thread that currently owns this lock, or null if not owned.
		protected Collection<Thread> 	getQueuedThreads() 							Returns a collection containing threads that may be waiting to acquire this lock.
		int								getQueueLength() 							Returns an estimate of the number of threads waiting to acquire this lock.
		protected Collection<Thread>	getWaitingThreads(Condition condition) 		Returns a collection containing those threads that may be waiting on the given condition associated with this lock.
		int								getWaitQueueLength(Condition condition)		Returns an estimate of the number of threads waiting on the given condition associated with this lock.
		boolean							hasQueuedThread(Thread thread)				Queries whether the given thread is waiting to acquire this lock.

	основные методы lock(), unlock()


13. Приведите наиболее существенное отличие между CountDownLatch и Barrier.

	CountDownLatch - используется в случаях когда один поток ожидает выполнения нескольких действий
	Barrier - используется когда необходимо чтобы несколько потоков в определенной точке своего выполнения ожидали достижения другими потоками барьера

	CountDownLatch - нельзя использовать повторно, для этих целей используется CyclicBarrier

14. Отличие Thread.start() и Thread.run()?

	Thread.start() - запускает на выполнение поток и потом метод run() с инициализированными переменными
	Thread.run() - вызывает метод класса


15. Объясните ключевое слово volatile.

	Чтение поля помеченного как volatile проиходит всегда из одной области памяти (регистра процессора), делает для достижения синхронизации общих ресурсов.


16. Расскажите про приоритеты потока.

	У потока есть приоритет, число от 1 до 10, по умолчанию 5. Планировщик потоков будет стараться давать потокам с большим приоритетом больше процессорного времени,
	но это не гарантируется, в разных ОС поведение планировщика может различаться.


17. Что такое потоки-демоны?

	фоновые служебные потоки, выполняющие сервисные функции (в windows это службы)


18. Назовите все возможные состояния потока.

	NEW
	RUNNABLE
	WAITING
	TIMED_WAITING
	BLOCKED
	TERMINATED


19. Что такое race condition?

	Ситуация когда потоки борятся за общие ресурсы без синхронизации доступа и в итоге нарушается целостность данных, либо каки то из потоков совсем не получают доступ к данным


20. Что такое Thread Local переменная? 

	это класс хранящий копию значение локально для потока


21. Что такое FutureTask?

	FutureTask это реализация интерфейса Future, можно отдать потоку Callable обернутый во FutureTask и ожидать возвращаемого значения FutureTask.get()
	
	Future - тип значения возвращаемого методом submit(Callable c) класса ExecutorService 
	
	Future - реализует Runnable
	
	FutureTask(Runnable r), FutureTask(Callable c)


22. Что такое Thread Pool?

	Пулл потоков это объект управляющий рядом потоков для выполнения ряда поставленных задач


23. Что такое Semaphore?

	Класс используемый для синхронизации многопоточного доступа к ресурсам. Инициализируется с исходным счетчиком. Для выдачи разрешения счетчик должен быть больше нуля.
	После окончания работы с ресурсом объект должен вернуть зянятое количество в счетчик, т.о. позволяя другим объектам ожидающим получения поступа продолжить работу с 
	ресурсом.


24. Чем отличается submit от execute у ExecutorServices?

	Future submit(Callable c) - ожидает завершения запущенного потока
	void execute(Runnable r) - запускает поток и продолжает свою работу без ожидания завершения


25. Чем отличается shutdown от shutdownNow у ThreadPoolExecutor?

	shutdown - не позволяет запускаться новым потокам, но ничего не делает с существующими
	shutdownNow - не позволяет запускаться новым потокам и прерывает выполнение существующих потоков


27. Как создать ThreadPool у ExecutorService только на 1, на 5, на неограниченное количество потоков.

	Используя следующий фабричный метод  Executors.newFixedThreadPool(int), Executors.newCachedThreadPool()


28. Что такое ReadWriteLock?

	Класс используемый в средах где много тех кто читает и мало тех кто пишет. Чтение происходит параллельно.

	rwl.readLock().lock()
	rwl.writeLock().lock()
	rwl.readLock().unlock()
	rwl.writeLock().unlock()


29. В чём отличие Thread от FutureTask? В чём отличие Thread.interrupt() и FutureTask.cancel().

	FutureTask реализация интерфеса Future, который реализует Runnable. Сам по себе не создает поток выполнения. 
	Передается Thread или ExecutorService для определения стэка вызовов потока.
	
	FutureTask.cancel(boolean mayInterruptIfRunning) вызывает InterruptedException только при параметре указанном в true


30. Расскажите про шаблон проектирования Producer Consumer.

	Шаблон разделяющий клиентов/потоки на роли Producer и Consumer, и реализующий мехаинзмы доступа к общим ресурсам.